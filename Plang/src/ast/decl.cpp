#ifndef DECL_AST
#define DECL_AST
#include "../../header/decl.hpp"
#include "../../header/srcLocation.hpp"

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ProcParams::ProcParams(SrcLocation loc, std::vector<FieldTypeSpec*> params, bool isVarArg, size_t varArgPos){
	this->loc = loc;
	this->params = params;
	this->isVarArg = isVarArg;
	this->varArgPos = varArgPos;
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ProcDecl::ProcDecl(SrcLocation loc, const char* name, ProcParams* params, TypeSpec* ret, ScopeStmt* scope, bool isExtern){
	this->loc = loc;
	this->name = name;
	this->params = params;
	this->ret = ret;
	this->scope = scope;
	this->isExtern = isExtern;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
AggregateDecl::AggregateDecl(SrcLocation loc, const char* name, bool isStruct, std::vector<FieldTypeSpec*> fields, std::vector<Decl*> methods) {
	this->loc = loc;
	this->name = name;
	this->isStruct = isStruct;
	this->fields = fields;
	this->methods = methods;
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
UseModuleDecl::UseModuleDecl(SrcLocation loc, std::filesystem::path path, std::vector<const char*> scopes, std::vector<const char*> names, bool importAll) {
	this->loc = loc;
	this->scopes = scopes;
	this->names = names;
	this->importAll = importAll;
	this->path = path;
	this->name = "USE DECL";
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ConstDecl::ConstDecl(SrcLocation loc, const char* name, TypeSpec* typespec, Expr* init) {
	this->loc = loc;
	this->name = name;
	this->typespec = typespec;
	this->init = init;
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#endif/*DECL_AST*/